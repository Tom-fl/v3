// vite.config.ts
import { fileURLToPath, URL } from "url";
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import autoImport from "unplugin-auto-import/vite";
import postcsspxtoviewport from "postcss-px-to-viewport";
import unoCss from "unocss/vite";
import { presetIcons, presetAttributify, presetUno } from "unocss";
import { visualizer } from "rollup-plugin-visualizer";
import { VitePWA } from "vite-plugin-pwa";
var __vite_injected_original_import_meta_url = "file:///C:/Users/Tom/Desktop/vue/vue3-demo/vite.config.ts";
var vite_config_default = defineConfig({
  plugins: [
    vue({
      reactivityTransform: true
    }),
    autoImport({
      imports: ["vue"],
      dts: "src/auto-import.d.ts"
    }),
    unoCss({
      presets: [presetIcons(), presetAttributify(), presetUno()],
      rules: [
        ["flex", { display: "flex" }],
        ["red", { color: "red" }],
        ["bd", { border: "1px solid #000" }],
        [/^m-(\d+)$/, ([, d]) => ({ margin: `${Number(d) * 10}px` })]
      ],
      shortcuts: {
        tom: ["flex", "red"]
      }
    }),
    visualizer({ open: true }),
    VitePWA({})
  ],
  css: {
    postcss: {
      plugins: [
        postcsspxtoviewport({
          unitToConvert: "px",
          viewportWidth: 750,
          unitPrecision: 6,
          propList: ["*"],
          viewportUnit: "vw",
          fontViewportUnit: "vw",
          selectorBlackList: ["ignore-"],
          minPixelValue: 1,
          mediaQuery: true,
          replace: true,
          landscape: false
        })
      ]
    }
  },
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  build: {
    chunkSizeWarningLimit: 2e3,
    cssCodeSplit: true,
    sourcemap: false,
    minify: "terser",
    assetsInlineLimit: 4e3
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
